generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id                     String             @id @default(uuid())
  customerFirstName      String
  customerLastName       String
  customerEmail          String
  customerPhone          String
  customerAddress        String
  customerCity           String
  customerState          String
  customerZip            String
  serviceType            String
  serviceDescription     String?
  timeline               String
  budgetRange            String
  propertyType           String
  propertyAge            String?
  existingSystem         String?
  systemIssue            String?
  preferredContactTime   String?
  preferredContactMethod String?            @default("phone")
  referralSource         String?
  utmSource              String?
  utmMedium              String?
  utmCampaign            String?
  formCompletionTime     Int?
  ipAddress              String?
  userAgent              String?
  deviceFingerprint      String?
  score                  Int
  category               String
  price                  Float
  qualityFlags           Json?
  confidenceLevel        Int?
  status                 String             @default("pending_assignment")
  rejectionReason        String?
  createdAt              DateTime           @default(now())
  assignedAt             DateTime?
  firstContactAt         DateTime?
  outcomeConfirmedAt     DateTime?
  customerEmailBounced   Boolean            @default(false)
  billingRecords         BillingRecord[]
  callLogs               CallLog[]
  feedback               CustomerFeedback[]
  assignment             LeadAssignment?
  smsLogs                SMSLog[]

  @@index([customerEmail])
  @@index([customerPhone])
  @@index([customerZip])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([referralSource])
  @@index([ipAddress])
  @@index([serviceType])
}

model Contractor {
  id                      String              @id @default(uuid())
  businessName            String
  email                   String              @unique
  phone                   String
  businessAddress         String?
  businessCity            String?
  businessState           String?
  businessZip             String?
  licenseNumber           String?
  yearsInBusiness         Int?
  serviceZipCodes         String[]
  specializations         String[]
  avgResponseTime         Int?
  conversionRate          Float?
  customerRating          Float?
  totalLeadsReceived      Int?
  totalJobsCompleted      Int?
  status                  String              @default("active")
  isAcceptingLeads        Boolean             @default(true)
  isVerified              Boolean             @default(false)
  createdAt               DateTime            @default(now())
  stripeCustomerId        String?
  stripePaymentMethodId   String?
  businessType            String?
  creditBalance           Float               @default(0.00)
  insuranceExpirationDate DateTime?
  insurancePolicyNumber   String?
  insuranceProvider       String?
  isApproved              Boolean             @default(false)
  licenseExpirationDate   DateTime?
  licenseState            String?
  paymentMethodBrand      String?
  paymentMethodExpMonth   Int?
  paymentMethodExpYear    Int?
  paymentMethodLast4      String?
  stripeSubscriptionId    String?
  subscriptionStatus      String?             @default("inactive")
  subscriptionTier        String?
  taxId                   String?
  updatedAt               DateTime            @updatedAt
  verificationNotes       String?
  verifiedAt              DateTime?
  websiteUrl              String?
  betaTesterLeadCost      Float?
  emailBounceReason       String?
  emailBounced            Boolean             @default(false)
  emailBouncedAt          DateTime?
  isBetaTester            Boolean             @default(false)
  lastActiveAt            DateTime?
  passwordHash            String?
  requirePasswordChange   Boolean             @default(false)
  subscriptionEndDate     DateTime?
  subscriptionStartDate   DateTime?
  suspensionReason        String?
  totalReviews            Int?
  acceptedTCPAAt          DateTime?
  acceptedTermsAt         DateTime?
  applicationSubmittedAt  DateTime?
  deletionRequestedAt     DateTime?
  ipAddress               String?
  privacyPolicyAcceptedAt DateTime?
  privacyPolicyVersion    String?             @default("1.0")
  smsOptOutAt             DateTime?
  smsOptedOut             Boolean             @default(false)
  tcpaConsentText         String?
  termsVersion            String?             @default("1.0")
  userAgent               String?
  billingRecords          BillingRecord[]
  callLogs                CallLog[]
  creditTransactions      CreditTransaction[]
  feedback                CustomerFeedback[]
  disputes                Dispute[]
  assignments             LeadAssignment[]
  notificationLogs        NotificationLog[]
  smsLogs                 SMSLog[]

  @@index([email])
  @@index([phone])
  @@index([status])
  @@index([licenseNumber])
  @@index([isVerified])
  @@index([subscriptionTier])
  @@index([subscriptionStatus])
  @@index([creditBalance])
  @@index([status, isAcceptingLeads, isVerified])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([serviceZipCodes])
}

model LeadAssignment {
  id               String     @id @default(uuid())
  leadId           String     @unique
  contractorId     String
  assignedAt       DateTime   @default(now())
  responseDeadline DateTime
  status           String     @default("assigned")
  trackingNumber   String?
  contractor       Contractor @relation(fields: [contractorId], references: [id])
  lead             Lead       @relation(fields: [leadId], references: [id])

  @@index([contractorId])
  @@index([status])
  @@index([trackingNumber])
  @@index([leadId])
  @@index([assignedAt])
}

model BillingRecord {
  id              String     @id @default(uuid())
  leadId          String
  contractorId    String
  amountOwed      Float
  status          String     @default("pending")
  notes           String?
  invoiceNumber   String?
  dateIncurred    DateTime   @default(now())
  invoicedAt      DateTime?
  paidAt          DateTime?
  stripePaymentId String?
  contractor      Contractor @relation(fields: [contractorId], references: [id])
  lead            Lead       @relation(fields: [leadId], references: [id])

  @@unique([leadId, contractorId])
  @@index([contractorId])
  @@index([leadId])
  @@index([status])
  @@index([dateIncurred])
}

model TrackingNumber {
  id               String    @id @default(uuid())
  leadId           String
  contractorId     String
  twilioNumber     String
  twilioSid        String?
  customerNumber   String
  contractorNumber String
  status           String    @default("active")
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  releasedAt       DateTime?

  @@index([leadId])
  @@index([twilioNumber])
  @@index([status])
  @@index([expiresAt])
}

model CallLog {
  id               String     @id @default(uuid())
  leadId           String
  contractorId     String
  callSid          String     @unique
  callDirection    String
  trackingNumber   String
  callStartedAt    DateTime
  callEndedAt      DateTime?
  callDuration     Int?
  callStatus       String
  recordingUrl     String?
  recordingSid     String?
  transcript       String?
  sentiment        String?
  keywordsDetected String[]
  contractor       Contractor @relation(fields: [contractorId], references: [id])
  lead             Lead       @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([contractorId])
  @@index([callSid])
  @@index([callStartedAt])
}

model SMSLog {
  id           String     @id @default(uuid())
  leadId       String
  contractorId String
  messageSid   String     @unique
  fromNumber   String
  toNumber     String
  messageBody  String
  direction    String
  status       String
  sentAt       DateTime   @default(now())
  deliveredAt  DateTime?
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  lead         Lead       @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([contractorId])
  @@index([messageSid])
}

model Dispute {
  id              String     @id @default(uuid())
  leadId          String
  contractorId    String
  reason          String
  description     String?
  evidence        Json?
  status          String     @default("pending")
  resolution      String?
  resolutionNotes String?
  creditAmount    Float?
  submittedAt     DateTime   @default(now())
  reviewedAt      DateTime?
  resolvedAt      DateTime?
  contractor      Contractor @relation(fields: [contractorId], references: [id])

  @@index([contractorId])
  @@index([leadId])
  @@index([status])
  @@index([submittedAt])
}

model CustomerFeedback {
  id                    String     @id @default(uuid())
  leadId                String
  contractorId          String
  contractorCalled      Boolean?
  contactMethod         String?
  outcome               String?
  jobValue              Float?
  outcomeNotes          String?
  rating                Int?
  feedbackText          String?
  wouldRecommend        Boolean?
  professionalismRating Int?
  qualityRating         Int?
  valueRating           Int?
  timelinessRating      Int?
  submittedAt           DateTime   @default(now())
  contractor            Contractor @relation(fields: [contractorId], references: [id])
  lead                  Lead       @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([contractorId])
  @@index([rating])
  @@index([outcome])
}

model NotificationLog {
  id           String      @id @default(uuid())
  type         String
  subject      String?
  body         String?
  status       String
  sentAt       DateTime    @default(now())
  metadata     Json?
  recipient    String
  contractorId String?
  contractor   Contractor? @relation(fields: [contractorId], references: [id])

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([contractorId])
}

model TwilioNumberPool {
  id            String    @id @default(uuid())
  phoneNumber   String    @unique
  status        String    @default("available")
  currentLeadId String?
  assignedAt    DateTime?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())

  @@index([status])
  @@index([phoneNumber])
  @@index([expiresAt])
}

model CreditTransaction {
  id              String     @id @default(uuid())
  contractorId    String
  type            String
  amount          Float
  balanceBefore   Float
  balanceAfter    Float
  stripePaymentId String?
  expiresAt       DateTime?
  leadId          String?
  billingRecordId String?
  description     String
  createdAt       DateTime   @default(now())
  contractor      Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@index([contractorId])
  @@index([type])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("CreditTransaction")
}

model Admin {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  name         String
  role         String    @default("admin") // 'admin' or 'super_admin'
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?

  @@map("Admin")
}